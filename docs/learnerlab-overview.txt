
WHAT IS DJANGO
- web dev framework definition
- the features that define it (MVC, ORM, RESTful API's, etc)
- why use it at all/whats it for
- where it fits in the big picture (controller, provides api's and connection to model - options for storage and front ends)
- provides standarized directory structure and boilerplate code
----- mvc infographic

COMPARISON
- comparison to alternative web dev frameworks (ruby on rails (ruby), laravel (php), asp.net (c#))
- what differentiates one framework from the next - language, directory structure, boilerplate code
- use cases

LANGUAGE
- what is python/what defines it (dynamically typed, interpreted language, high level)
- what is a virtual environment and benefits/how to use

MODELS/DATABASES
- choices for model/database (sql/no sql - more support ORM features for relational databases)
- python libraries/sdks (pymongo)
WHATS ORM
- detail object relational mapping and benefits
- simplifies relational databases only
- challenges of using NoSQL databases with Django (solutions such as pymongo)

COMMON FRONT END FRAMEWORKS
- comparison to alternative front end choices (react, react native, flutter, ionic)
- cross-platform framework or native/web only
- python libraries/sdks

WHATS AN IDE
- integrated development environment, what it good for
- file explorer/manager, many files open at once
- terminal, execution, debugging
- extensions/remote access/testing and debugging
- language and feature support (virutal environments)
- recommended extensions for web development - thunderclient (replaces postman), remote explorer (ssh)

COMPARISON
- why use vscode or alternatives
- cloud native ide's (AWS Cloud9) and additional intergration

USING GITHUB
- git in general
- version control/rollback/branches & forks
- easily clone project and update the repo from any location/machine
- it can be any directory (creates a hidden file that is used to connect and compare to the repo)
- using python virtual environments to isolate all project dependencies

WHATS IN A PROJECT
- detail the directory structure
- what are the most important files
- where are the apis, views, database connection (models)
----- file structure infographic

HOSTING A PROJECT - VMs AND SERVERS/LINUX
- hypervisor software
- virtualbox, vmware, emo
- network options/ip designation
- mimics production environment more closely/testing
- linux is goto for servers - lightweight

API CONSIDERATIONS
- documentation with Swagger
- testing with postman/thunderclient
- CORS cross origin resource sharing




LAAAAAAAAB

STARTING A NEW DJANGO PROJECT
- commands to create project and start server
- what the commands do
- django needs to be running server to access (has built in simple server that would be migrated to Apache/nginix for deployment)

ACCESSING AN EXISTING DJANGO PROJECT
- to save an exisiting project, ensure you create a new requirements.txt if any dependencies/libraries changed, then push to git
- cross platform
- clone repo
- install python requirement.txt and start the server







Colors:
Dark gray: #171717
Light gray: #2F2F2F

fade:
1: #CD9CD0
4: #9CCAED