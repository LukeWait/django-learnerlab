"""settings.py

Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# These are quick-start development settings - unsuitable for production!
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# This key is used for cryptographic signing. Keep it confidential in production environments.
SECRET_KEY = 'django-insecure-)_#sk$g8s@uo=3l(*8z3526ia(gncsrtoy7$@$j%!0*r2*t79^'

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to True for development purposes to get detailed error pages. 
# In production it would be unwise to expose this information to potential threat actors.
DEBUG = True

# List of allowed host/domain names that can serve this application.
# Use '*' to allow all hosts during development, but specify in production.
ALLOWED_HOSTS = ['*']


# Application definition

# List of installed applications. This includes Django's built-in apps and custom apps.
INSTALLED_APPS = [
    'django.contrib.admin',         # Admin interface
    'django.contrib.auth',          # Authentication system
    'django.contrib.contenttypes',  # Content types framework
    'django.contrib.sessions',      # Session framework
    'django.contrib.messages',      # Messaging framework
    'django.contrib.staticfiles',   # Static files management
    # Declare the 'rest_framework' toolkit to enable functionality.
    'rest_framework',
    # List project apps here.
    'main_app',
]

# Middleware to process requests and responses globally.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',            # Security enhancements
    'django.contrib.sessions.middleware.SessionMiddleware',     # Session support
    'django.middleware.common.CommonMiddleware',                # Common functionalities
    'django.middleware.csrf.CsrfViewMiddleware',              # Cross-site request forgery protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # User authentication
    'django.contrib.messages.middleware.MessageMiddleware',     # Enables messages framework
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # Clickjacking protection
]

# The URL configuration module for this Django project.
ROOT_URLCONF = 'config.urls'

# Template settings for rendering HTML. By default it looks for a directory within apps called 'templates'.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',               # Template backend
        'DIRS': ['nosql_ex_venv/lib/python3.10/site-packages/drf_yasg/templates'],  # Additional directories to search for templates
                                                                                    # Path to 'drf_yasg' assets has been added
        'APP_DIRS': True,                                                           # Enables template discovery in installed apps
        'OPTIONS': {
            'context_processors': [                                                 # Context processors to add context variables to templates
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application for deploying the project.
WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# By default, SQLite is used as the database engine.
# This setting can be changed to connect to external relational databases (e.g., PostgreSQL, MySQL).
# Django's ORM allows interaction with the database using Python objects, simplifying CRUD operations.
# For external NoSQL databases (e.g., MongoDB), use libraries like pymongo directly in your code, 
# and comment out this section.
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
"""


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
# Configuration for password validation rules.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
# Configure language and timezone settings for the application.
LANGUAGE_CODE = 'en-us'  # Language code for this installation
TIME_ZONE = 'UTC'        # Default timezone for the application
USE_I18N = True          # Enable internationalization
USE_TZ = True            # Enable timezone-aware datetimes


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
# URL for serving static files such as js, css, and images.
STATIC_URL = 'static/'
# Additional directories to search for static files - path to 'drf_yasg' assets has been added.
STATICFILES_DIRS = [
    'nosql_ex_venv/lib/python3.10/site-packages/drf_yasg/static'
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
# This setting defines the type of primary key fields in models.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
